set.seed(666)
n=1500
x1 = rnorm(n)           # some continuous variables
x2 = rnorm(n)
x3 = rnorm(n)           # some continuous variables
x4 = rnorm(n)
x11 <- 0.2*x1 + 0.8*x2
x22 <- x2
x33 <- 0.3*x3+0.7*x2
x44 <- 0.5*x4 - x2
z = 1 + 2*x11 + 3*x22 -x33 + 0.5*x44        # linear combination with a bias
pr = 1/(1+exp(-z))         # pass through an inv-logit function
y = rbinom(n,1,pr)
a=data.frame(x11=x11,x22=x22,x33=x33,x44=x44)
cor(a)
df = data.frame(y=y,x11=x11,x22=x22,x33=x33,x44=x44)
result <-glm( y~x11+x22+x33+x44,data=df,family="binomial")
summary(result)
b=princomp(a, cor = TRUE,scores=TRUE)
b
df2 <-data.frame(y=y, xx1=b$scores[,1], xx2=b$scores[,2], xx3=b$scores[,3], xx4=b$scores[,4])
result2 <-glm( y~xx1+xx2+xx3+xx4,data=df2,family="binomial")
result2$coefficients
result2$corrb
vcov(result2)
summary(b)
b.loadings
b$.loadings
b$loadings
loading <-b$loadings
dim(loading)
loading
loading[2,2]
loading[2,1]
loading[1,2]
dim(par)
par
par<-result2$coefficients
par
dim(par)
par=as.matrix(par,dim=(1,3))
par=matrix(par,ncol=1,nrow=3)
par=matrix(par,ncol=1,nrow=4)
par
par<-result2$coefficients
par=matrix(par,ncol=1,nrow=4)
par<-result2$coefficients
par=matrix(par,ncol=1,nrow=5)
par
xprime<-matrix(df2$xx1,df2$xx2,df2$xx3,df2$xx4)
dim(df2$xx1)
dim(df2)
loading
cc<-df2[,2:5]%*%loading
is.matrix(loading)
is.matrix(df2)
cc<-data.matrix(df2[,2:5])%*%loading
cc
cc[1:10,1:4}
cc[1:10,1:4]
cc<-data.matrix(t(df2[,2:5]))%*%loading
cc<-t(data.matrix(df2[,2:5]))%*%loading
cc<-data.matrix(df2[,2:5])%*%t(loading)
cc[1:10,1:4]
a[1:10,]
cc<-loading%*%data.matrix(df2[,2:5])
summary(a)
summary(cc)
scale(a)
scaled_a=scale(a)
scaled_a[,1:10]
scaled_a[1:10,]
cc[1:10,]
cc<-data.matrix(df2[,2:5])%*%loading
cc[1:10,]
cc<-data.matrix(df2[,2:5])%*%t(loading)
cc[1:10,]
par
new_par=par[2:5]%*%t(loading)
new_par
par
result$coefficients
summary(b)
class(b)
str(b)
cc*b$scale
cc*b$scale[1:10,]
test<-cc*b$scale
test[1:10,]
a[1:10,]
str(b)
b$center+cc
test <-b$center+cc
test[1:10,]
a[1:10,]
cc[1:10,]-a[1:10,]
)cc[1:10,]-a[1:10,])/a[1:10,]
(cc[1:10,]-a[1:10,])/a[1:10,]
str(b)
test <-(b$center+cc)*b$scale
test[1:10,]
a[1:10,]
b$scale
test <-(cc*b$scale+b$center)
test[1:10,]
a[1:10,]
scaled_a
scaled_a[1:10,]
cc[1:10,]
mean(a)
average(a)
summary(b)
b
str(b)
b$scales
b$scale
test_s<-(a-b$center))/b$scale
test_s<-(a-b$center)/b$scale
test_s[1:10,]
head(scaled_a)
head(cc)
dim(a)
dim(b$scale)
b$scale
test_s<-(a[,1]-(b$center)[,1])/(b$scale)[,1]
test_s<-(a[,1]-(b$center)[1])/(b$scale)[1]
head(test_s)
head(a)
head(scaled_a)
test_s<-(a[,2]-(b$center)[2])/(b$scale)[2]
head(test_s)
unscaled_cc <-cbind(cc[,1]*(b$scale)[1]+(b$center)[1],cc[,2]*(b$scale)[2]+(b$center)[2],
cc[,3]*(b$scale)[3]+(b$center)[3],cc[,4]*(b$scale)[4]+(b$center)[4])
head(unscaled_cc)
head(a)
unscaled_cc <=cc
do i in 1:4 {
unscaled_cc[,i]=cc[,i]*(b$scale)[i]+(b$center)[i]
}
unscaled_cc <=cc
for (i in 1:4) {
unscaled_cc[,i]=cc[,i]*(b$scale)[i]+(b$center)[i]
}
head(unscaled_cc)
head(a)
dim(loading)
loading
new_var=loading%*%var%*%t(loading)
var
dim(var)
var<-vcov(result2)
var
new_var=loading%*%var[2:5,2:5]%*%t(loading)
new_var
require(graphics)
1 - pt(1:5, df = 1)
qt(.975, df = c(1:10,20,50,100,1000))
t<-pt(new_par/diag(new_var),df=n-5)
t
t<-pt(new_par/sqrt(diag(new_var)),df=n-5)
t
new_par
diag(new_var)
sqrt(diag(new_var))
require(graphics)
1 - pt(1:5, df = 1)
qt(.975, df = c(1:10,20,50,100,1000))
t<-1-pt(new_par/sqrt(diag(new_var)),df=n-5)
t
new_par
new_par/sqrt(diag(new_var))
t<-c(1,1,1,1)-pt(new_par/sqrt(diag(new_var)),df=n-5)
t
new_par
new_par/sqrt(diag(new_var))
pt(new_par/sqrt(diag(new_var)),df=n-5)
t<-c(1,1,1,1)-pt(abs(new_par)/sqrt(diag(new_var)),df=n-5)
t
new_par
summary(result)
cor(a)
set.seed(666)
n=300
x1 = rnorm(n)           # some continuous variables
x2 = rnorm(n)
x3 = rnorm(n)           # some continuous variables
x4 = rnorm(n)
x11 <- 0.2*x1 + 0.8*x2
x22 <- x2
x33 <- 0.3*x3+0.7*x2
x44 <- 0.5*x4 - x2
z = 1 + 2*x11 + 3*x22 -x33 + 0.5*x44        # linear combination with a bias
pr = 1/(1+exp(-z))         # pass through an inv-logit function
y = rbinom(n,1,pr)      # bernoulli response variable
a=data.frame(x11=x11,x22=x22,x33=x33,x44=x44)
cor(a)
#now feed it to glm:
df = data.frame(y=y,x11=x11,x22=x22,x33=x33,x44=x44)
result <-glm( y~x11+x22+x33+x44,data=df,family="binomial")
result
summary(result)
b=princomp(a, cor = TRUE,scores=TRUE)
loading <-b$loadings
df2 <-data.frame(y=y, xx1=b$scores[,1], xx2=b$scores[,2], xx3=b$scores[,3], xx4=b$scores[,4])
result2 <-glm( y~xx1+xx2+xx3+xx4,data=df2,family="binomial")
par<-result2$coefficients
var<-vcov(result2)
par=matrix(par,ncol=1,nrow=5)
new_par=par[2:5]%*%t(loading)
new_var=loading%*%var[2:5,2:5]%*%t(loading)
t<-c(1,1,1,1)-pt(abs(new_par)/sqrt(diag(new_var)),df=n-5)
new_par
t
result$coefficient
vcov(result)
t0<-c(1,1,1,1)-pt(abs(result$coefficient)/sqrt(diag(vcov(result))),df=n-5)
t0<-c(1,1,1,1,1)-pt(abs(result$coefficient)/sqrt(diag(vcov(result))),df=n-5)
t0
summary(result)
t0<-c(1,1,1,1,1)-pt(abs(result$coefficient)/sqrt(diag(vcov(result))*(n-5)),df=n-5)
t0
t0<-c(1,1,1,1,1)-pt(abs(result$coefficient)/sqrt(diag(vcov(result))),df=n-5,lower.tail=TRUE)
t0
t0<-2*(c(1,1,1,1,1)-pt(abs(result$coefficient)/sqrt(diag(vcov(result))),df=n-5,lower.tail=TRUE))
t0
pt(3.66,df=300)
pt(1.073,df=300)
1-pt(1.073,df=300)
1-2*pt(1.073,df=300)
pnrom(1.073,lower.tail=TRUE,df=300)
pnorm(1.073,lower.tail=TRUE,df=300)
pnorm(1.073,lower.tail=TRUE)
1-pnorm(1.073,lower.tail=TRUE)
t<-c(1,1,1,1)-2*pnorm(abs(new_par)/sqrt(diag(new_var)),lower.tail=TRUE)
t
pnorm(abs(new_par)/sqrt(diag(new_var)),lower.tail=TRUE)
1-pnorm(1.073,lower.tail=TRUE)
1-2*pnorm(1.073,lower.tail=TRUE)
1-pnorm(1.073,lower.tail=TRUE)
1-pnorm(1.073,lower.tail=FALSE)
1-2*pnorm(1.073,lower.tail=FALSE)
summary(result)
pnorm(1.073)
1-pnorm(1.073)
t0<-2*(c(1,1,1,1,1)-2*pnorm(abs(result$coefficient)/sqrt(diag(vcov(result)))))
t0
t0<-2*(c(1,1,1,1,1)-pnorm(abs(result$coefficient)/sqrt(diag(vcov(result)))))
t0
b=princomp(a, cor = TRUE,scores=TRUE)
loading <-b$loadings
df2 <-data.frame(y=y, xx1=b$scores[,1], xx2=b$scores[,2], xx3=b$scores[,3], xx4=b$scores[,4])
result2 <-glm( y~xx1+xx2+xx3+xx4,data=df2,family="binomial")
par<-result2$coefficients
var<-vcov(result2)
par=matrix(par,ncol=1,nrow=5)
new_par=par[2:5]%*%t(loading)
new_var=loading%*%var[2:5,2:5]%*%t(loading)
t<-2*(c(1,1,1,1)-pnorm(abs(new_par)/sqrt(diag(new_var))))
t
new_par
summary(b)
plot(b)
df2 <-data.frame(y=y, xx1=b$scores[,1], xx2=b$scores[,2], xx3=b$scores[,3])
result2 <-glm( y~xx1+xx2+xx3,data=df2,family="binomial")
par<-result2$coefficients
var<-vcov(result2)
par=matrix(par,ncol=1,nrow=5)
par
par<-result2$coefficients
var<-vcov(result2)
par=matrix(par,ncol=1,nrow=4)
new_par=par[2:4]%*%t(loading)
loading
loading_part=loading[,1:3]
new_par=par[2:4]%*%t(loading_part)
new_var=loading_part%*%var[2:4,2:4]%*%t(loading_part)
t<-2*(c(1,1,1,1)-pnorm(abs(new_par)/sqrt(diag(new_var))))
new_par
t
summary(result)
n=500
x1 = rnorm(n)           # some continuous variables
x2 = rnorm(n)
x3 = rnorm(n)           # some continuous variables
x4 = rnorm(n)
x11 <- 0.2*x1 + 0.8*x2
x22 <- x2
x33 <- 0.3*x3+0.7*x2
x44 <- 0.5*x4 - x2
z = 1 + 2*x11 + 3*x22 -x33 + 0.5*x44        # linear combination with a bias
pr = 1/(1+exp(-z))         # pass through an inv-logit function
y = rbinom(n,1,pr)      # bernoulli response variable
a=data.frame(x11=x11,x22=x22,x33=x33,x44=x44)
cor(a)
#now feed it to glm:
df = data.frame(y=y,x11=x11,x22=x22,x33=x33,x44=x44)
result <-glm( y~x11+x22+x33+x44,data=df,family="binomial")
b=princomp(a, cor = TRUE,scores=TRUE)
loading <-b$loadings
#doing real analysis
b=princomp(a, cor = TRUE,scores=TRUE)
loading <-b$loadings
df2 <-data.frame(y=y, xx1=b$scores[,1], xx2=b$scores[,2], xx3=b$scores[,3])
result2 <-glm( y~xx1+xx2+xx3,data=df2,family="binomial")
par<-result2$coefficients
var<-vcov(result2)
par=matrix(par,ncol=1,nrow=4)
loading_part=loading[,1:3]
new_par=par[2:4]%*%t(loading_part)
new_var=loading_part%*%var[2:4,2:4]%*%t(loading_part)
t<-2*(c(1,1,1,1)-pnorm(abs(new_par)/sqrt(diag(new_var))))
new_par
t
reresult$coefficient
result$coefficients
true_par=c(2,3,-1,0.5)
summary(result)
n=300
x1 = rnorm(n)           # some continuous variables
x2 = rnorm(n)
x3 = rnorm(n)           # some continuous variables
x4 = rnorm(n)
x11 <- 0.2*x1 + 0.8*x2
x22 <- x2
x33 <- 0.3*x3+0.7*x2
x44 <- 0.5*x4 - x2
z = 1 + 2*x11 + 3*x22 -x33 + 0.5*x44        # linear combination with a bias
pr = 1/(1+exp(-z))         # pass through an inv-logit function
y = rbinom(n,1,pr)      # bernoulli response variable
a=data.frame(x11=x11,x22=x22,x33=x33,x44=x44)
cor(a)
#now feed it to glm:
df = data.frame(y=y,x11=x11,x22=x22,x33=x33,x44=x44)
result <-glm( y~x11+x22+x33+x44,data=df,family="binomial")
b=princomp(a, cor = TRUE,scores=TRUE)
loading <-b$loadings
b=princomp(a, cor = TRUE,scores=TRUE)
loading <-b$loadings
df2 <-data.frame(y=y, xx1=b$scores[,1], xx2=b$scores[,2], xx3=b$scores[,3])
result2 <-glm( y~xx1+xx2+xx3,data=df2,family="binomial")
par<-result2$coefficients
var<-vcov(result2)
par=matrix(par,ncol=1,nrow=4)
loading_part=loading[,1:3]
new_par=par[2:4]%*%t(loading_part)
new_var=loading_part%*%var[2:4,2:4]%*%t(loading_part)
t<-2*(c(1,1,1,1)-pnorm(abs(new_par)/sqrt(diag(new_var))))
t
summary(result)
t
new_par
set.seed(666)
n=300
x1 = rnorm(n)           # some continuous variables
x2 = rnorm(n)
x3 = rnorm(n)           # some continuous variables
x4 = rnorm(n)
x11 <- 0.2*x1 + 0.8*x2
x22 <- x2
x33 <- 0.3*x3+0.7*x2
x44 <- 0.5*x4 - x2
z = 1 + 2*x11 + 3*x22 -x33 + 0.5*x44        # linear combination with a bias
pr = 1/(1+exp(-z))         # pass through an inv-logit function
y = rbinom(n,1,pr)      # bernoulli response variable
a=data.frame(x11=x11,x22=x22,x33=x33,x44=x44)
cor(a)
#now feed it to glm:
df = data.frame(y=y,x11=x11,x22=x22,x33=x33,x44=x44)
result <-glm( y~x11+x22+x33+x44,data=df,family="binomial")
b=princomp(a, cor = TRUE,scores=TRUE)
loading <-b$loadings
summary(result)
b=princomp(a, cor = TRUE,scores=TRUE)
loading <-b$loadings
df2 <-data.frame(y=y, xx1=b$scores[,1], xx2=b$scores[,2], xx3=b$scores[,3])
result2 <-glm( y~xx1+xx2+xx3,data=df2,family="binomial")
par<-result2$coefficients
var<-vcov(result2)
par=matrix(par,ncol=1,nrow=4)
loading_part=loading[,1:3]
new_par=par[2:4]%*%t(loading_part)
new_var=loading_part%*%var[2:4,2:4]%*%t(loading_part)
t<-2*(c(1,1,1,1)-pnorm(abs(new_par)/sqrt(diag(new_var))))
result$coefficients
t
q()
install.packages("gbm")
library("gbm", lib.loc="~/R/win-library/3.2")
install.packages("tm")
library("tm", lib.loc="~/R/win-library/3.2")
?readPDF
uri <- sprintf("file://%s", system.file(file.path("doc", "tm.pdf"), package = "tm"))
if(all(file.exists(Sys.which(c("pdfinfo", "pdftotext"))))) {
pdf <- readPDF(control = list(text = "-layout"))(elem = list(uri = uri),
language = "en",
id = "id1")
content(pdf)[1:13]
}
VCorpus(URISource(uri, mode = ""),
readerControl = list(reader = readPDF(engine = "ghostscript")))
VCorpus(URISource(uri, mode = ""),
readerControl = list(reader = readPDF(engine = "ghostscript")))
txt <- system.file("texts", "txt", package = "tm")
(ovid <- VCorpus(DirSource(txt, encoding = "UTF-8"),
+ readerControl = list(language = "lat")))
uri <- sprintf("file://%s", system.file(file.path("doc", "tm.pdf"), package = "tm"))
if(all(file.exists(Sys.which(c("pdfinfo", "pdftotext"))))) {
pdf <- readPDF(control = list(text = "-layout"))(elem = list(uri = uri),
language = "en",
id = "id1")
content(pdf)[1:13]
}
VCorpus(URISource(uri, mode = ""),
readerControl = list(reader = readPDF(engine = "ghostscript")))
txt <- system.file("texts", "txt", package = "tm")
(ovid <- VCorpus(DirSource(txt, encoding = "UTF-8"),
+ readerControl = list(language = "lat")))
install.packages("magrittr")
install.packages("plyr")
install.packages("dplyr")
install.packages("stringr")
install.packages("RODBC")
install.packages("readxl")
install.packages("haven")
install.packages("sqldf")
install.packages("gbm")
install.packages("rtf")
install.packages("RDCOMClient")
q()
q()
install.packages("ROracle")
install.packages("ROracle")
install.packages("ROracle",type = "source")
install.packages("lubridate")
install.packages("magrittr")
install.packages("plyr")
install.packages("dplyr")
install.packages("stringr")
install.packages("RODBC")
install.packages("readxl")
install.packages("haven")
install.packages("sqldf")
install.packages("gbm")
install.packages("rtf")
install.packages("RDCOMClient")
install.packages("tcltk2")
source('S:/Project_Directory_CCU/CCU_VBA/Travel/Countries/US/DailyChecks/redoCode_v7a.R', echo=TRUE)
source('S:/Project_Directory_CCU/CCU_VBA/Travel/Countries/US/DailyChecks/redoCode_v7a.R', echo=TRUE)
source('S:/Project_Directory_CCU/CCU_VBA/Travel/Countries/US/DailyChecks/redoCode_v7a.R', echo=TRUE)
source('S:/Project_Directory_CCU/CCU_VBA/Travel/Countries/US/DailyChecks/redoCode_v7a.R', echo=TRUE)
load("E:/My Documents/Training/Revolution R/Intro to R/R/1_R_at_High_Level.R")
setwd("E:/My Documents/Training/Revolution R/Intro to R/R")
setwd("E:/My Documents/Training/Revolution R/Intro to R/data")
## ----intro-example, eval=FALSE-------------------------------------------
head(mtcars)
attach(mtcars)
fit0 <- lm(mpg ~ ., data=mtcars) # fit with all variables
summary(fit0)
library(MASS)
fit1 <- stepAIC(fit0, direction='both')
summary(fit1)
plot(fit1)
?setwd
data.path <- "../data"
data.path
datafile <- file.path(data.path, "performance.csv")
datafile
performance <- read.csv(datafile, stringsAsFactors=FALSE)
performance
head(performance)
str(performance) ## look at the data
performance$Click.Date <- as.Date(performance$Click.Date, format='%m/%d/%y')
str(performance)
numeric.cols <- c('Engine.CTR', 'LP.CTR')
str(performance)
removePercent <- function(x) as.numeric(sub('%', '', x))/100
?sub
install.packages("rmarkdown")
